<% if memory.errors.any? %>
  <div style="color: red">
    <h2><%= pluralize(memory.errors.count, "error") %> prohibited this memory from being saved:</h2>

    <ul>
      <% memory.errors.each do |error| %>
        <li><%= error.full_message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<div class="row">
  <div class="col">
 
<%= form_with(model: memory, multipart: true) do |form| %>

  <div class="row g-2 mb-3">
    <div class="col-md">
      <div class="form-floating">
        <% if memory.new_record? %>
          <%= form.date_field :date, class: "form-control" %>
        <% else %>
          <%= form.date_field :date, class: "form-control" %>
        <% end %>
        <%= form.label :date, class: "form-label" %>
      </div>
    </div>
    <div class="col-md">
      <div class="form-floating">
        <%= form.fields_for :address do |address_fields| %>
          <%= address_fields.text_field :input, class: "form-control", placeholder: "Enter a location" %>
          <%= address_fields.label :input, "Location", class: "form-label" %>
        <% end %>
      </div>
    </div>
  </div>

  <div class="form-floating mb-3">
    <%= form.text_field :title, class: "form-control", placeholder: "Enter a title" %>
    <%= form.label :title, class: "form-label" %>
  </div>

  <div class="form-floating mb-3">
    <%= form.text_area :description, class: "form-control", style: "height: 10rem;",placeholder: "Enter a description" %>
    <%= form.label :description, class: "form-label" %>
  </div>

  <div class="mb-3">
    <% people.each do |person| %>
      <% people_memory = memory.people_memories.where({ :person_id => person.id }).at(0) || memory.people_memories.build({ :person_id => person.id }) %>
      <%= form.fields_for :people_memories, people_memory do |people_memory_fields| %>
        <%= people_memory_fields.hidden_field :person_id, { :value => person.id } %>
        <%= people_memory_fields.check_box :_destroy, { :class => "btn-check", :checked => people_memory.persisted? }, "0", "1" %>
        <%= people_memory_fields.label :_destroy, person.firstlast_name, { :class => "btn btn-outline-secondary sm", :id => "btn-check-2-outlined", style: "--bs-btn-padding-y: .35em; --bs-btn-padding-x: .65em; --bs-btn-font-size: .75em; --bs-btn-font-weight: 700 ; border-radius: 1rem ; line-height: 1" } %>
      <% end %>
    <% end %>
  </div>

  <div class="mb-3">
    <%= form.fields_for :media, form.object.media.build do |medium_fields| %>
      <%= medium_fields.file_field :url, { class: "form-control" } %>
    <% end %>
  </div>
  
  <div class="d-grid gap-2 mb-3">
    <%= form.submit class: "btn btn-primary" %>
  </div>
<% end %>
  
</div>
  <div class="col">
  

<div id='map_form' style='width: 100%; height: 100%; overflow: visible'></div>

<!-- Script for Mapbox -->
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">
 
 
<script>
  mapboxgl.accessToken = '<%= ENV['MAPBOX_PUBLIC_TOKEN'] %>';
  var map_form = new mapboxgl.Map({
      container: 'map_form', // container ID
      style: 'mapbox://styles/mapbox/satellite-v9', // style URL
      center: [-87.637505, 41.879138], // starting position [lng, lat]
      zoom: 9, // starting zoom
  });
 
// Add the control to the map_form.

var geocoder = new MapboxGeocoder({
  accessToken: mapboxgl.accessToken,
  mapboxgl: mapboxgl
});

geocoder.on('result', function(e) {
  document.getElementById('memory_address_attributes_input').value = e.result.place_name;
});

map_form.addControl(geocoder);


</script>
</div>

</div>
