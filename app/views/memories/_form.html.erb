<% if memory.errors.any? %>
  <div style="color: red">
    <h2><%= pluralize(memory.errors.count, "error") %> prohibited this memory from being saved:</h2>

    <ul>
      <% memory.errors.each do |error| %>
        <li><%= error.full_message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<div class="d-flex flex-column flex-lg-row">
  <div class="col-12 col-lg-6 order-2 order-md-1">
    <%= form_with(model: memory, multipart: true) do |form| %>
      <div class="row g-2">
        <div class="col-md">
          <div class="form-floating mb-3">
            <%= form.date_field :date, class: "form-control", value: memory.new_record? ? Date.today : memory.date %>
            <%= form.label :date, class: "form-label" %>
          </div>
        </div>
        <div class="col-md">
          <div class="form-floating mb-3">
            <%= form.text_field :lng, class: "form-control", disabled: true %>
            <%= form.label :lng, class: "form-label" %>
          </div>
        </div>
        <div class="col-md">
          <div class="form-floating mb-3">
            <%= form.text_field :lat, class: "form-control", disabled: true %>
            <%= form.label :lat, class: "form-label" %>
          </div>
        </div>
      </div>
      <div class="row g-2">
        <div class="col-md">
          <div class="form-floating  mb-3">
            <%= form.text_field :location, class: "form-control", placeholder: "Enter a location" %>
            <%= form.label :location, class: "form-label" %>
          </div>
        </div>
        <div class="col-md">
          <div class="form-floating mb-3">
            <%= form.text_field :place, class: "form-control" %>
            <%= form.label :place, class: "form-label" %>
          </div>
        </div>
        <div class="col-md">
          <div class="form-floating mb-3">
            <%= form.text_field :country, class: "form-control" %>
            <%= form.label :country, class: "form-label" %>
          </div>
        </div>
      </div>

      <div class="form-floating mb-3">
        <%= form.text_field :title, class: "form-control", placeholder: "Enter a title" %>
        <%= form.label :title, class: "form-label" %>
      </div>

      <div class="form-floating mb-3">
        <%= form.text_area :description, class: "form-control", style: "height: 10rem;",placeholder: "Enter a description" %>
        <%= form.label :description, class: "form-label" %>
      </div>

      <div class="mb-3">
        <% people.each do |person| %>
          <% people_memory = memory.people_memories.where({ :person_id => person.id }).at(0) || memory.people_memories.build({ :person_id => person.id }) %>
          <%= form.fields_for :people_memories, people_memory do |people_memory_fields| %>
            <%= people_memory_fields.hidden_field :person_id, { :value => person.id } %>
            <%= people_memory_fields.check_box :_destroy, { :class => "btn-check", :checked => people_memory.persisted? }, "0", "1" %>
            <%= people_memory_fields.label :_destroy, person.firstlast_name, { :class => "btn btn-outline-secondary sm", :id => "btn-check-2-outlined", style: "--bs-btn-padding-y: .35em; --bs-btn-padding-x: .65em; --bs-btn-font-size: .75em; --bs-btn-font-weight: 700 ; border-radius: 1rem ; line-height: 1" } %>
          <% end %>
        <% end %>
      </div>

      <div class="mb-3">
        <%= form.fields_for :media, form.object.media.build do |medium_fields| %>
          <%= medium_fields.file_field :url, { class: "form-control" } %>
        <% end %>
      </div>
      
      <div class="d-grid gap-2 mb-3">
        <%= form.submit class: "btn btn-primary" %>
      </div>
    <% end %>
  </div>

  <div class="col-12 col-lg-6 order-1 order-md-2 min-vh-50 m-1">
    <div id='map_form' class="min-vh-50" style='width: 100%; height: 95%; min-height: 300px;'></div>
    <div id="menu" class="text-end">
      <!-- See a list of Mapbox-hosted public styles at -->
      <!-- https://docs.mapbox.com/api/maps/styles/#mapbox-styles -->
      <input id="streets-v12" type="radio" name="rtoggle" value="streets" checked="checked">
      <label for="streets-v12">streets</label>
      <input id="satellite-streets-v12" type="radio" name="rtoggle" value="satellite">
      <label for="satellite-streets-v12">satellite streets</label>
    </div>
    <!--<pre id="coordinates" class="coordinates"></pre>-->
  </div>
</div>

<script>
  mapboxgl.accessToken = '<%= ENV['MAPBOX_PUBLIC_TOKEN'] %>';

  // Initialize the map_form.
  // const coordinates = document.getElementById('coordinates');
  var map_form = new mapboxgl.Map({
      container: 'map_form', // container ID
      style: 'mapbox://styles/mapbox/streets-v12', // style URL
      center: [-87.637505, 41.879138], // starting position [lng, lat]
      zoom: 9, // starting zoom
  });
  // Add controls to the map.
    // Add the search box to the map_form.
    var geocoder = new MapboxGeocoder({
      accessToken: mapboxgl.accessToken,
      marker: false, //{
      //color: 'orange', 
      //draggable: true
      //},
      mapboxgl: mapboxgl,
    });
    map_form.addControl(geocoder);
    // Add navigation and geolocation
    map_form.addControl(new mapboxgl.NavigationControl());
    map_form.addControl(new mapboxgl.GeolocateControl());
    // Add a scale to the map
    map_form.addControl(new mapboxgl.ScaleControl());
    // Add style controls to the map_form.
    var layerList = document.getElementById('menu');
    var inputs = layerList.getElementsByTagName('input');
    for (const input of inputs) {
    input.onclick = (layer) => {
    const layerId = layer.target.id;
    map_form.setStyle('mapbox://styles/mapbox/' + layerId);
    };
    }

  // Function to create a draggable marker
    function createDraggableMarker(lngLat, map) {
      var marker = new mapboxgl.Marker({
        draggable: true
      })
      .setLngLat(lngLat)
      .addTo(map);
      marker.on('dragend', function() {
        const newLngLat = marker.getLngLat();
        console.log('Marker coordinates:', newLngLat);
        document.getElementById('memory_lng').value = newLngLat.lng.trunc();
        document.getElementById('memory_lat').value = newLngLat.lat;
        // coordinates.style.display = 'block';
        // coordinates.innerHTML = `Longitude: ${newLngLat.lng}<br />Latitude: ${newLngLat.lat}`;
      });
      return marker;
    }
    // Allowing users to drag the marker to a more precise location
    var marker = null;
    // When a result is selected from the geocoder
    geocoder.on('result', function(e) {
       // Save the JSON response
      geocoderResult = e.result;
      console.log(geocoderResult);
      // If a marker already exists, remove it
      if (marker) {
        marker.remove();
      }
      // Create a new marker at the result location
      marker = createDraggableMarker(e.result.geometry.coordinates, map_form);
    });
    
  // Copy the address to the hidden input
  geocoder.on('result', function(e) {
    document.getElementById('memory_location').value = e.result.text;
    document.getElementById('memory_lng').value = e.result.geometry.coordinates[0];
    document.getElementById('memory_lat').value = e.result.geometry.coordinates[1];
    const placeObject = e.result.context.find(c => c.id.startsWith('place'));
    const placeName = placeObject?.text || e.result.text || '';
    document.getElementById('memory_place').value = placeName;
    const countryObject = e.result.context.find(c => c.id.startsWith('country'));
    const countryName = countryObject?.text || '';
    document.getElementById('memory_country').value = countryName;
  });
</script>
